count = 0
rendezvous



mutex . wait ()
count = count + 1
if(count == n) {
    barrier . signal ()
}
mutex . signal ()


// Turnstile
barrier . wait ()

mutex . wait ()
count -= 1
if (count == 0) {
    barrier.wait()
}
mutex . signal ()

barrier . signal ()
critical point

// Musnt read count without mutex. 

// Allowing a precocious thread to pass through second
// barrier before all threads have passed through first
// use two turnstiles:

count = 0
mutex = Semaphore(1)
turnstile = Semaphore(0)
turnstile2 = Semaphore(1)

# rendezvous

mutex . wait ()
count += 1
    if count == n :
        turnstile2 . wait () # lock the second
        turnstile . signal () # unlock the first
mutex . signal ()

turnstile . wait () # first turnstile
turnstile . signal ()

# critical point

mutex . wait ()
    count -= 1
    if count == 0:
        turnstile . wait () # lock the first
        turnstile2 . signal () # unlock the second
mutex . signal ()

turnstile2 . wait () # second turnstile
turnstile2 . signal ()

// Two phase barrier. Two turnstiles and a mutex. Then we always lock 
// one of them. Either the first or the second. 
// Cool solution.

// only nth thread can lock/unlock turnstiles.
// before unlocking one we must close the other. 
// Forces sequentiality. May be more context switch than ideally.
// may be simplified if signal can take an argument. not a problem
// to be interleaved.
